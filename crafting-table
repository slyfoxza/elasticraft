#!/usr/bin/env python
# Copyright 2019 Philip Cronje
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
import base64
import boto3
import botocore
import click
import dataclasses
import email.mime.multipart
import email.mime.text
import gzip
import io
import ipaddress
import os
import sys
import uuid
import yaml


class CraftingTableError(Exception):
    def __init__(self, message):
        super().__init__(message)


@click.group()
@click.pass_context
@click.option("--profile")
def cli(context, profile):
    botocore_session = botocore.session.Session(profile=profile)
    creds_provider = botocore_session.get_component("credential_provider").get_provider("assume-role")
    creds_provider.cache = botocore.credentials.JSONFileCache(os.path.expanduser("~/.aws/cli/cache"))
    boto_session = boto3.Session(botocore_session=botocore_session)
    context.obj = boto_session.resource("ec2")


def id_list(resources):
    return ", ".join(map(lambda resource: resource.id, resources))


def find_vpc(ec2):
    """
    Finds exactly one VPC tagged with "elasticraft:vpc" that was created by the CloudFormation template. If
    multiple VPCs are found, or none at all, a CraftingTableError is raised.
    """
    vpcs = list(ec2.vpcs.filter(Filters=[
        {"Name": "tag:elasticraft", "Values": ["vpc"]},
        {"Name": "tag:aws:cloudformation:logical-id", "Values": ["Vpc"]}]))
    if len(vpcs) == 1:
        return vpcs[0]
    elif len(vpcs) == 0:
        raise CraftingTableError("No VPC found")
    else:
        raise CraftingTableError(f"Multiple VPCs found: {id_list(vpcs)}")


def create_subnets(ec2, vpc, subnets):
    """Ensure subnets exist for each availability zone."""
    # Generate candidate subnet CIDRs by shifting the VPC's prefix by 4 bits, yielding 16 possible subnet
    # CIDRs.
    vpc_cidr = ipaddress.ip_network(vpc.cidr_block)
    subnet_cidrs = list(vpc_cidr.subnets(prefixlen_diff=4))

    # The set difference between the availability zones that already have subnets and the availability zones
    # available in the region yields the set of availability zones where subnets must be created.
    subnet_azs = frozenset(map(lambda subnet: subnet.availability_zone, subnets))
    available_azs = frozenset(map(
        lambda az: az["ZoneName"], ec2.meta.client.describe_availability_zones()["AvailabilityZones"]))

    for az in (available_azs - subnet_azs):
        # If subnets already exist, their CIDRs may conflict with the candidate CIDRs that were generated.
        # Loop through the candidate list until subnet creation does not fail with a CIDR conflict error, or
        # until no candidates remain.
        while len(subnet_cidrs) > 0:
            try:
                cidr = subnet_cidrs.pop(0)
                subnet = vpc.create_subnet(AvailabilityZone=az, CidrBlock=cidr.with_prefixlen)
                # Ensure that the new subnet has the MapPublicIpOnLaunch attribute set
                ec2.meta.client.modify_subnet_attribute(SubnetId=subnet.id,
                                                        MapPublicIpOnLaunch={"Value": True})
                click.echo(f"Created new subnet: {subnet.id}")
                break
            except botocore.exceptions.ClientError as e:
                if e.response["Error"]["Code"] == "InvalidSubnet.Conflict":
                    continue
                raise
        else:
            raise CraftingTableError(f"Could not find valid CIDR to create subnet in {az}")


def configure_routing(vpc):
    """Ensure that the VPC's main route table has a route to the internet gateway."""
    internet_gateways = list(vpc.internet_gateways.all())
    if len(internet_gateways) == 1:
        internet_gateway = internet_gateways[0]
    elif len(internet_gateways) == 0:
        raise CraftingTableError("No internet gateway found")
    else:
        raise CraftingTableError(f"Multiple internet gateways found: {id_list(internet_gateways)}")

    route_tables = list(vpc.route_tables.filter(Filters=[{"Name": "association.main", "Values": ["true"]}]))
    if len(route_tables) == 1:
        route_table = route_tables[0]
    elif len(route_tables) == 0:
        raise CraftingTableError("No route table found")
    if len(route_tables) != 1:
        raise CraftingTableError(f"Multiple route tables found: {id_list(route_tables)}")

    for route in route_table.routes:
        if route.gateway_id == internet_gateway.id:
            break
    else:
        route_table.create_route(DestinationCidrBlock="0.0.0.0/0", GatewayId=internet_gateway.id)
        click.echo(f"Created default route to {internet_gateway.id}")


def find_minecraft_security_group(vpc):
    security_groups = list(vpc.security_groups.filter(Filters=[
        {"Name": "tag:elasticraft", "Values": ["minecraftSecurityGroup"]}]))
    if len(security_groups) == 1:
        return security_groups[0]
    elif len(security_groups) == 0:
        raise CraftingTableError("Could not find Minecraft security group")
    else:
        raise CraftingTableError(f"Multiple Minecraft security groups: {id_list(security_groups)}")


def configure_minecraft_security_group(vpc):
    security_group = find_minecraft_security_group(vpc)

    # Newly-created security groups have an egress permission allowing all outbound traffic that cannot be
    # removed using CloudFormation. Since this security group will be removed at run-time from the network
    # interface, remove this automatically-created rule to ensure that egress permissions are provided by a
    # different security group.
    try:
        security_group.revoke_egress(IpPermissions=[
            {"IpProtocol": "-1", "IpRanges": [{"CidrIp": "0.0.0.0/0"}]}])
        click.echo(f"Revoked default egress permission from {security_group.id}")
    except botocore.exceptions.ClientError as e:
        if e.response["Error"]["Code"] != "InvalidPermission.NotFound":
            raise


@cli.command()
@click.pass_obj
def vpc(ec2):
    vpc = find_vpc(ec2)
    # Retrieve existing subnets to determine which availability zones already have one, and to ensure that
    # their MapPublicIpOnLaunch attribute is set.
    subnets = list(vpc.subnets.all())
    for subnet in filter(lambda subnet: not subnet.map_public_ip_on_launch, subnets):
        ec2.meta.client.modify_subnet_attribute(SubnetId=subnet.id, MapPublicIpOnLaunch={"Value": True})

    create_subnets(ec2, vpc, subnets)
    configure_routing(vpc)
    configure_minecraft_security_group(vpc)


@dataclasses.dataclass
class LaunchTemplate:
    id: str
    default_version_number: int


@dataclasses.dataclass
class LaunchTemplateVersion:
    image_id: str
    key_name: str
    network_interfaces: list
    user_data: str
    version_number: int


def find_launch_template(ec2, launch_template_id):
    if launch_template_id is not None:
        response = ec2.meta.client.describe_launch_templates(LaunchTemplateIds=[launch_template_id])
        launch_template = response['LaunchTemplates'][0]
        ec2.create_tags(Resources=[launch_template_id],
                        Tags=[{"Key": "elasticraft", "Value": "launchTemplate"}])
    else:
        launch_templates = []
        for page in ec2.meta.client.get_paginator('describe_launch_templates').paginate(
                Filters=[{"Name": "tag:elasticraft", "Values": ["launchTemplate"]}]):
            launch_templates += page['LaunchTemplates']
        if len(launch_templates) == 1:
            launch_template = launch_templates[0]
        elif len(launch_template) == 0:
            raise CraftingTableError("No launch template found")
        else:
            ids = ", ".join(map(lambda lt: lt["LaunchTemplateId"], launch_templates))
            raise CraftingTableError(f"Multiple launch templates found: {ids}")

    return LaunchTemplate(id=launch_template["LaunchTemplateId"],
                          default_version_number=launch_template["DefaultVersionNumber"])


def get_default_launch_template_version(ec2, launch_template):
    response = ec2.meta.client.describe_launch_template_versions(
            LaunchTemplateId=launch_template.id, Versions=[str(launch_template.default_version_number)])
    lt_version = response["LaunchTemplateVersions"][0]
    lt_data = lt_version["LaunchTemplateData"]
    return LaunchTemplateVersion(image_id=lt_data.get("ImageId"),
                                 key_name=lt_data.get("KeyName"),
                                 network_interfaces=lt_data.get("NetworkInterfaces", []),
                                 user_data=lt_data.get("UserData"),
                                 version_number=lt_version["VersionNumber"])


def find_data_volume(ec2):
    volumes = list(ec2.volumes.filter(Filters=[{"Name": "tag:elasticraft", "Values": ["dataVolume"]}]))
    if len(volumes) == 1:
        return volumes[0]
    elif len(volumes) == 0:
        raise CraftingTableError("No data volume found")
    else:
        raise CraftingTableError(f"Multiple data volumes found: {id_list(volumes)}")


def find_default_security_group(vpc):
    security_groups = list(vpc.security_groups.filter(Filters=[
        {"Name": "group-name", "Values": ["default"]}]))
    if len(security_groups) == 1:
        return security_groups[0]
    elif len(security_groups) == 0:
        raise CraftingTableError("Could not find default security group")
    else:
        raise CraftingTableError(f"Multiple default security groups: {id_list(security_groups)}")


@cli.command()
@click.option("--launch-template-id")
@click.option("--key-name")
@click.pass_obj
def launch_template(ec2, launch_template_id, key_name):
    launch_template = find_launch_template(ec2, launch_template_id)
    lt_version = get_default_launch_template_version(ec2, launch_template)

    launch_template_data = {}

    images = ec2.images.filter(ExecutableUsers=["all"], Owners=["amazon"],
                               Filters=[{"Name": "name", "Values": ["amzn2-ami-hvm-2.0.*-x86_64-gp2"]}])
    ami = sorted(images, key=lambda ami: ami.creation_date, reverse=True)[0]
    if ami.id != lt_version.image_id:
        launch_template_data["ImageId"] = ami.id
        click.echo(f"Using AMI {ami.description} ({ami.id})")

    if len(lt_version.network_interfaces) == 0:
        volume = find_data_volume(ec2)
        vpc = find_vpc(ec2)
        subnets = list(vpc.subnets.filter(
            Filters=[{"Name": "availability-zone", "Values": [volume.availability_zone]}]))
        if len(subnets) == 1:
            subnet = subnets[0]
        elif len(subnets) == 0:
            raise CraftingTableError(f"No subnet found in {volume.availability_zone}")
        else:
            raise CraftingTableError(f"Multiple subnets found in {volume.availability_zone}: "
                                     f"{id_list(subnets)}")
        default_security_group = find_default_security_group(vpc)
        minecraft_security_group = find_minecraft_security_group(vpc)
        launch_template_data["NetworkInterfaces"] = [{
            "DeviceIndex": 0,
            "Groups": [default_security_group.id, minecraft_security_group.id],
            "SubnetId": subnet.id}]
        click.echo(f"Using {subnet.id} and security groups {default_security_group.id}, "
                   f"{minecraft_security_group.id}")

    user_data = email.mime.multipart.MIMEMultipart(boundary="ElasticraftMIMEBoundary")
    parts = (("cloud-init.sh", "x-shellscript"),)
    for filename, mime_subtype in parts:
        with open(filename) as f:
            mime_text = email.mime.text.MIMEText(f.read(), mime_subtype, "UTF-8")
        mime_text.add_header("Content-Disposition", f'attachment; filename="{filename}"')
        user_data.attach(mime_text)

    with open("cloud-init.yaml") as f:
        ci_yaml = yaml.full_load(f.read())
    scripts = (("attach-volume", "/usr/local/sbin/attach-volume"), ("enderman", "/usr/local/bin/enderman"),
               ("rs-comparator", "/usr/local/bin/rs-comparator"))
    for filename, output_path in scripts:
        with open(filename) as f:
            ci_yaml["write_files"].append({"path": output_path, "permissions": "0755", "content": f.read()})
    mime_text = email.mime.text.MIMEText(yaml.dump(ci_yaml), "cloud-config", "UTF-8")
    user_data.attach(mime_text)

    gzip_bytes = io.BytesIO()
    with gzip.GzipFile(mode="wb", fileobj=gzip_bytes, mtime=1321653240) as f:
        f.write(str(user_data).encode())
    gzip_bytes = gzip_bytes.getvalue()
    gzip_bytes_len = len(gzip_bytes)
    if gzip_bytes_len < 1024:
        click.echo(f"User data length: {gzip_bytes_len} B/16 KiB")
    else:
        click.echo(f"User data length: {format(gzip_bytes_len / 1024., '.2f')} KiB/16 KiB")
    encoded_user_data = base64.b64encode(gzip_bytes).decode('us-ascii')
    if lt_version.user_data != encoded_user_data:
        launch_template_data["UserData"] = encoded_user_data
        click.echo("Updating user data")

    if key_name is not None and lt_version.key_name != key_name:
        launch_template_data["KeyName"] = key_name
        click.echo(f"Updating key name to {key_name}")

    if len(launch_template_data) != 0:
        response = ec2.meta.client.create_launch_template_version(
                ClientToken=str(uuid.uuid4()), LaunchTemplateData=launch_template_data,
                LaunchTemplateId=launch_template.id, SourceVersion=str(lt_version.version_number),
                VersionDescription=f"Updating {', '.join(launch_template_data.keys())} from version "
                                   f"{lt_version.version_number} by {__file__} script")
        new_version = response["LaunchTemplateVersion"]["VersionNumber"]
        ec2.meta.client.modify_launch_template(
                ClientToken=str(uuid.uuid4()),
                DefaultVersion=str(new_version),
                LaunchTemplateId=launch_template.id)
        click.echo(f"Created new launch template version {new_version}")
    else:
        click.echo("No update necessary to launch template")


if __name__ == "__main__":
    try:
        cli()
    except CraftingTableError as e:
        click.secho(str(e), fg="red")
        sys.exit(1)
