# Copyright 2019 Philip Cronje
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
# compliance with the License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under the License is
# distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and limitations under the License.
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  ServerPostApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: server_post.handler
      Runtime: python3.7
      CodeUri: server_post.py.zip
  ServerPostApiFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ServerPostApiFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/POST/server
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types: [REGIONAL]
      Body:
        openapi: 3.0.2
        info:
          title: !Ref AWS::StackName
          version: 1.0.0
        paths:
          "/server":
            post:
              requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        operation:
                          type: string
                          enum: [start, stop]
                      required: [operation]
                required: true
              responses:
                "501":
                  description: Not implemented error
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          message:
                            type: string
              x-amazon-apigateway-request-validator: full
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ServerPostApiFunction.Arn}/invocations
        components:
          securitySchemes:
            sigv4:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: awsSigv4
        security:
        - sigv4: []
        x-amazon-apigateway-request-validators:
          full:
            validateRequestBody: true
            validateRequestParameters: true
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref Api
      StageName: elasticraft
